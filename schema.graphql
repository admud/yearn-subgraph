type Farmer @entity {
  id: ID!
  # "Amount of underlying token per 1 share"
  # pricePerFullShare: BigDecimal!
  "Amount of earn token per 1 share"
  earnPricePerFullShare: BigDecimal!
  "Amount of vault token per 1 share"
  vaultPricePerFullShare: BigDecimal!
  "Total shares supply"
  totalSupply: BigDecimal!
  "Total Balance of the strategy in ERC-20"
  pool: BigDecimal!
  earnBalance: BigDecimal!
  "Full vault underlying token balance (vault + strategy)"
  vaultBalance: BigDecimal!
  "Deposit token"
  underlyingToken: Token!
  shareToken: Token!
  "Transaction metadata for the last update"
  transaction: Transaction!
  "balance: totalDeposited - totalWithdrawn: all deposits of underlying made by external accounts"
  netDeposits: BigDecimal!
  totalDeposited: BigDecimal!
  totalWithdrawn: BigDecimal!
  "totalActiveShares: totalSharesMinted - totalSharesBurned"
  totalActiveShares: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalEarnings: BigDecimal!
  # raw
  # pricePerFullShareRaw: BigInt!
  earnPricePerFullShareRaw: BigInt!
  vaultPricePerFullShareRaw: BigInt!
  totalSupplyRaw: BigInt!
  poolRaw: BigInt!
  earnBalanceRaw: BigInt!
  "Balance of the Vault contract of underlying Token + balance of the Strategy contract of underlying Token"
  vaultBalanceRaw: BigInt!
  netDepositsRaw: BigInt!
  totalDepositedRaw: BigInt!
  totalWithdrawnRaw: BigInt!
  totalActiveSharesRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalEarningsRaw: BigInt!
  # derived fields
  transfers: [Transfer!]! @derivedFrom(field: "farmer")
  deposits: [Deposit!]! @derivedFrom(field: "farmer")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "farmer")
  balances: [AccountVaultBalance!]! @derivedFrom(field: "farmer")
}

type Account @entity {
  "User ethereum address"
  id: ID!
  earnBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")
  vaultBalances: [AccountVaultBalance!]! @derivedFrom(field: "account")
  "Account deposits"
  deposits: [Deposit!]! @derivedFrom(field: "account")
  "Account withdrawals"
  withdrawals: [Deposit!]! @derivedFrom(field: "account")
  "Incoming transfers"
  receivedTransfers: [Transfer!]! @derivedFrom(field: "to")
  "Outgoing transfers"
  sentTransfers: [Transfer!]! @derivedFrom(field: "from")
}

type AccountVaultBalance @entity {
  id: ID!
  farmer: Farmer!
  account: Account!
  "Deposit/withdrawal token"
  underlyingToken: Token!
  shareToken: Token!
  "Net deposits of a given Account within a given Vault. Transfers between accounts are taken into consideration for this metric"
  netDeposits: BigDecimal!
  "Total tokens deposited by this Account in Vault"
  totalDeposited: BigDecimal!
  "Total tokens withdrawn by this Account in Vault"
  totalWithdrawn: BigDecimal!
  "Total tokens sent to another account by this Account in Vault"
  totalSent: BigDecimal!
  "Total tokens received from another account by this Account in Vault"
  totalReceived: BigDecimal!
  "Shares are the token minted by the Vault"
  shareBalance: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalSharesSent: BigDecimal!
  totalSharesReceived: BigDecimal!
  "Net deposits of a given Account within a given Vault. Transfers between accounts are taken into consideration for this metric"
  netDepositsRaw: BigInt!
  "Total tokens deposited by this Account in Vault"
  totalDepositedRaw: BigInt!
  "Total tokens withdrawn by this Account in Vault"
  totalWithdrawnRaw: BigInt!
  "Total tokens sent to another account by this Account in Vault"
  totalSentRaw: BigInt!
  "Total tokens received from another account by this Account in Vault"
  totalReceivedRaw: BigInt!
  "Shares are the token minted by the Vault"
  shareBalanceRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalSharesSentRaw: BigInt!
  totalSharesReceivedRaw: BigInt!
}

type Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

type FarmerToken @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
  balanceRaw: BigInt!
  getPricePerFullShare: BigInt!
}

type Transfer @entity {
  id: ID!
  from: Account!
  to: Account!
  value: BigInt!
  amount: BigInt!
  farmer: Farmer!
  totalSupply: BigInt!
  transaction: Transaction!
}

interface Action @entity {
  id: ID!
  farmer: Farmer!
  account: Account!
  amount: BigInt!
  shares: BigInt!
  totalSupply: BigInt!
  transaction: Transaction!
}

type Deposit implements Action @entity {
  id: ID!
  farmer: Farmer!
  account: Account!
  amount: BigInt!
  amountInUSD: BigDecimal
  shares: BigInt!
  totalSupply: BigInt!
  transaction: Transaction!
}

type Withdrawal implements Action @entity {
  id: ID!
  farmer: Farmer!
  account: Account!
  amount: BigInt!
  amountInUSD: BigDecimal
  shares: BigInt!
  totalSupply: BigInt!
  transaction: Transaction!
}

type Transaction @entity {
  "ID = Transaction Hash"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!
  deposits: [Deposit!]! @derivedFrom(field: "transaction")
  withdrawals: [Withdrawal!]! @derivedFrom(field: "transaction")
  transfers: [Transfer!]! @derivedFrom(field: "transaction")
}